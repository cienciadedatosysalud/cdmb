# Generated by CodiumAI

import pytest

from cdmb import ComparisonRule, BetweenComparison, InValuesRule
from cdmb import RuleSet
from cdmb import Variable

"""
Code Analysis

Main functionalities:
The RuleSet class is responsible for managing a set of rules that can be applied to a dataset. It allows for the creation, modification, and retrieval of rules, as well as the generation of synthetic data based on those rules. The class also provides methods for getting the structure of the rules and for generating example rules based on a list of variables.

Methods:
- __init__: initializes the RuleSet object with a list of rules (if provided) and a description of the syntax for the rules.
- append_rule: adds a new rule to the list of rules.
- pop_rule: removes and returns the last rule in the list of rules.
- rules_for_synthetic_data: generates a set of rules for generating synthetic data based on the current set of rules and a list of variables.
- get_rules_comparison_between_variables: generates a set of rules for comparing variables in the current set of rules.
- get_rules_dict: returns a dictionary representation of the current set of rules.
- get_structure: returns a list of dictionaries representing the structure of the current set of rules.
- get_rules_structure_example: generates example rules based on a list of variables.

Fields:
- _description: a string describing the syntax for the rules.
- _rules: a list of Rule objects representing the current set of rules.
"""


class TestRuleSet:
    #  Tests that the RuleSet class can be instantiated with no arguments
    def test_instantiate_rule_set_with_no_arguments(self):
        rs = RuleSet()
        assert isinstance(rs, RuleSet)
        assert rs.rules == []

    #  Tests that the RuleSet class can be instantiated with a list of rules
    def test_instantiate_rule_set_with_list_of_rules(self):
        r1 = ComparisonRule(Variable('age', "patient's age"), '>=', 18)
        r2 = BetweenComparison(Variable('height', "patient's height"), 170, 180)
        rs = RuleSet([r1, r2])
        assert isinstance(rs, RuleSet)
        assert len(rs.rules) == 2

    #  Tests that the rules property returns the correct list of rules
    def test_rules_property_returns_correct_list_of_rules(self):
        r1 = ComparisonRule(Variable('age', "patient's age"), '>=', 18)
        r2 = BetweenComparison(Variable('height', "patient's height"), 170, 180)
        rs = RuleSet([r1, r2])
        assert rs.rules == [r1, r2]

    #  Tests that the rules property can be set with a new list of rules
    def test_rules_property_can_be_set_with_new_list_of_rules(self):
        r1 = ComparisonRule(Variable('age', "patient's age"), '>=', 18)
        r2 = BetweenComparison(Variable('height', "patient's height"), 170, 180)
        rs = RuleSet([r1, r2])
        r3 = InValuesRule(Variable('gender', "patient's gender"), ['male', 'female'])
        rs.rules = [r3]
        assert rs.rules == [r3]

    #  Tests that the append_rule method adds a new rule to the list of rules
    def test_append_rule_method_adds_new_rule_to_list_of_rules(self):
        r1 = ComparisonRule(Variable('age', "patient's age"), '>=', 18)
        r2 = BetweenComparison(Variable('height', "patient's height"), 170, 180)
        rs = RuleSet([r1, r2])
        r3 = InValuesRule(Variable('gender', "patient's gender"), ['male', 'female'])
        rs.append_rule(r3)
        assert rs.rules == [r1, r2, r3]

    #  Tests that the pop_rule method removes and returns the last rule in the list of rules
    def test_pop_rule_method_removes_and_returns_last_rule_in_list_of_rules(self):
        r1 = ComparisonRule(Variable('age', "patient's age"), '>=', 18)
        r2 = BetweenComparison(Variable('height', "patient's height"), 170, 180)
        rs = RuleSet([r1, r2])
        assert rs.pop_rule() == r2
        assert rs.rules == [r1]
