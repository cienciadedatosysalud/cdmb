
# Generated by CodiumAI

import pytest

from cdmb.project.Author import Author
from cdmb.project.Metadata import Metadata

"""
Code Analysis

Main functionalities:
The Metadata class is designed to store and manage metadata information for a project. It allows for the storage of project information such as project name, version, authors, keywords, description, notes, spatial coverage, and license. The class also provides methods for adding and removing authors, setting and getting values for the various fields, and returning the metadata structure as a dictionary.

Methods:
- __init__: Initializes the Metadata object with the given project, use case, version, funder, url_project, work_package, document, authors, keywords, description, notes, spatial_coverage, and license.
- add_author: Adds an Author object to the list of authors.
- pop_author: Removes and returns the last Author object from the list of authors.
- get_structure: Returns the metadata structure as a dictionary.
- Various setter methods: Set the values of the corresponding fields.
- Various getter methods: Return the values of the corresponding fields.

Fields:
- _uuid: A unique identifier for the Metadata object.
- _project: The name of the project.
- _funder: The name of the funder of the project.
- _url_project: The URL of the project.
- _work_package: The name of the work package.
- _use_case: The name of the use case.
- _document: The name of the document.
- _version_sem: The semantic version of the project.
- _authors: A list of Author objects.
- _keywords: A list of keywords associated with the project.
- _description: A description of the project.
- _notes: Additional notes about the project.
- _spatial_coverage: The spatial coverage of the project.
- _license: The license of the project.
"""
class TestMetadata:
    #  Tests that a Metadata object can be created with required arguments
    def test_create_metadata_object(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        assert metadata.project == 'Test Project'
        assert metadata.use_case == 'Test Use Case'
        assert metadata.version_sem == '0.0.1'
        assert metadata.funder is None
        assert metadata.url_project is None
        assert metadata.work_package is None
        assert metadata.document is None
        assert metadata.authors == []
        assert metadata.keywords == []
        assert metadata.description is None
        assert metadata.notes is None
        assert metadata.spatial_coverage is None
        assert metadata.license == 'CC BY 4.0 https://creativecommons.org/licenses/by/4.0/deed.es'

    #  Tests that all properties can be set and retrieved
    def test_set_and_get_properties(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        metadata.project = 'New Project'
        metadata.funder = 'Test Funder'
        metadata.url_project = 'http://example.com'
        metadata.work_package = 'Test Work Package'
        metadata.document = 'Test Document'
        metadata.use_case = 'New Use Case'
        metadata.version_sem = '1.0.0'
        author1 = Author(name='John Doe', affiliation='University of California')
        author2 = Author(name='Jane Doe', affiliation='University of California')
        metadata.authors = [author1, author2]
        assert metadata.project == 'New Project'
        assert metadata.funder == 'Test Funder'
        assert metadata.url_project == 'http://example.com'
        assert metadata.work_package == 'Test Work Package'
        assert metadata.document == 'Test Document'
        assert metadata.use_case == 'New Use Case'
        assert metadata.version_sem == '1.0.0'
        assert metadata.authors == [author1, author2]

    #  Tests that authors can be added and removed
    def test_add_and_remove_authors(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        author1 = Author(name='John Doe', affiliation='University of California')
        author2 = Author(name='Jane Doe', affiliation='University of California')
        metadata.add_author(author1)
        metadata.add_author(author2)
        assert metadata.authors == [author1, author2]
        assert metadata.pop_author() == author2
        assert metadata.authors == [author1]

    #  Tests that keywords can be set and retrieved
    def test_set_and_get_keywords(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        metadata.keywords = ['keyword1', 'keyword2']
        assert metadata.keywords == ['keyword1', 'keyword2']

    #  Tests that a Metadata object cannot be created with invalid arguments
    def test_create_metadata_object_with_invalid_arguments(self):
        with pytest.raises(TypeError):
            Metadata(project='Test Project', use_case='Test Use Case', authors='invalid')
        with pytest.raises(ValueError):
            Metadata(project='a'*251, use_case='Test Use Case')
        with pytest.raises(ValueError):
            Metadata(project='Test Project', use_case='a'*251)
        with pytest.raises(ValueError):
            Metadata(project='Test Project', use_case='Test Use Case', version_sem='invalid')

    #  Tests that properties cannot be set with invalid values
    def test_set_properties_with_invalid_values(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        with pytest.raises(ValueError):
            metadata.project = 'a'*251
        with pytest.raises(ValueError):
            metadata.funder = 'a'*501
        with pytest.raises(ValueError):
            metadata.url_project = 'a'*251
        with pytest.raises(ValueError):
            metadata.work_package = 'a'*251
        with pytest.raises(ValueError):
            metadata.use_case = 'a'*251
        with pytest.raises(ValueError):
            metadata.document = 'a'*251
        with pytest.raises(ValueError):
            metadata.notes = 'a'*1001
        with pytest.raises(ValueError):
            metadata.spatial_coverage = 'a'*251

    #  Tests that keywords cannot be set with more than 10 items
    def test_set_keywords_with_more_than_10_items(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        with pytest.raises(ValueError):
            metadata.keywords = ['keyword']*11
