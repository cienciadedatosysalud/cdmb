
# Generated by CodiumAI

import pytest

from cdmb import Author

"""
Code Analysis

Main functionalities:
The Author class represents the information associated with an author, including their name, affiliation, and ORCID identifier. It provides methods to set and get these attributes, as well as a method to retrieve the author's information as a dictionary.

Methods:
- __init__: initializes the Author object with the provided name, affiliation, and ORCID identifier
- name, affiliation, id getters and setters: allow getting and setting the name, affiliation, and ORCID identifier attributes of the Author object
- get_structure: returns the Author object's attributes as a dictionary

Fields:
- _name: the name of the author
- _affiliation: the affiliation of the author
- _id: the ORCID identifier of the author
"""
class TestAuthor:
    #  Tests that an Author object can be constructed with name, affiliation, and id
    def test_construct_author_with_name_affiliation_id(self):
        author = Author(name='John Doe', affiliation='University of California', id='0000-0000-0000-0001')
        assert author.name == 'John Doe'
        assert author.affiliation == 'University of California'
        assert author.id == '0000-0000-0000-0001'

    #  Tests that an Author object can be constructed with only name
    def test_construct_author_with_only_name(self):
        author = Author(name='John Doe')
        assert author.name == 'John Doe'
        assert author.affiliation is None
        assert author.id is None

    #  Tests that the name, affiliation, and id of an Author object can be set
    def test_set_name_affiliation_id(self):
        author = Author(name='John Doe')
        author.name = 'Jane Doe'
        author.affiliation = 'University of California'
        author.id = '0000-0000-0000-0002'
        assert author.name == 'Jane Doe'
        assert author.affiliation == 'University of California'
        assert author.id == '0000-0000-0000-0002'

    #  Tests that the name, affiliation, and id of an Author object can be retrieved
    def test_get_name_affiliation_id(self):
        author = Author(name='John Doe', affiliation='University of California', id='0000-0000-0000-0001')
        assert author.get_structure() == {'name': 'John Doe', 'affiliation': 'University of California', 'id': '0000-0000-0000-0001'}

    #  Tests that an Author object cannot be constructed with a name longer than 250 characters
    def test_construct_author_with_long_name(self):
        with pytest.raises(ValueError):
            Author(name='a'*251)

    #  Tests that an Author object cannot be constructed with an affiliation longer than 250 characters
    def test_construct_author_with_long_affiliation(self):
        with pytest.raises(ValueError):
            Author(name='John Doe', affiliation='a'*251)

    #  Tests that an Author object cannot be constructed with an invalid ORCID identifier
    def test_construct_author_with_invalid_orcid(self):
        with pytest.raises(ValueError):
            Author(name='John Doe', id='1234-5678-9012')

    #  Tests that the name of an Author object cannot be set with a name longer than 250 characters
    def test_set_name_with_long_name(self):
        author = Author(name='John Doe')
        with pytest.raises(ValueError):
            author.name = 'a'*251

    #  Tests that the affiliation of an Author object cannot be set with an affiliation longer than 250 characters
    def test_set_affiliation_with_long_affiliation(self):
        author = Author(name='John Doe')
        with pytest.raises(ValueError):
            author.affiliation = 'a'*251

    #  Tests that the id of an Author object cannot be set with an invalid ORCID identifier
    def test_set_id_with_invalid_orcid(self):
        author = Author(name='John Doe')
        with pytest.raises(ValueError):
            author.id = '1234-5678-9012'

    #  Tests that an Author object can be constructed with no arguments
    def test_construct_author_with_no_arguments(self):
        author = Author(name=None)
        assert author.name is None
        assert author.affiliation is None
        assert author.id is None

    #  Tests that an Author object can be constructed with an empty string for id
    def test_construct_author_with_empty_id(self):
        author = Author(name='John Doe', id='')
        assert author.name == 'John Doe'
        assert author.affiliation is None
        assert author.id == ''
