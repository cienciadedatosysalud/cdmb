
# Generated by CodiumAI

import pytest

from cdmb import CommonDataModel, Variable
from cdmb import Cohort
from cdmb import Entity
from cdmb import Metadata
from cdmb import Relationship
import datetime
"""
Code Analysis

Main functionalities:
- The CommonDataModel class represents a common data model that can be used to define metadata, cohorts, entities, and relationships in a data project.
- It provides methods to add and remove entities, set and get metadata and cohort information, and save the project to a specified directory.
- It also has a method to generate a JSON structure representing the data model and a method to load a previous configuration from a dictionary or from web files.

Methods:
- __init__: Initializes the CommonDataModel object with metadata, cohort, entities, and relationships.
- add_entity: Adds an entity to the list of entities.
- pop_entity: Removes and returns the last entity from the list of entities.
- save_project: Saves the project to a specified directory by calling various private methods to write metadata, cohort, entities, relationships, and other project files.
- save_zipped_project: Saves the project to a temporary directory, creates a zip file of the project, and returns the UUID of the zip file.
- generate_json_structure: Generates a JSON structure representing the data model.
- load_previous_configuration: Loads a previous configuration from a dictionary and returns the metadata, cohort, entities, and relationships.
- load_previous_configuration_from_web: Loads a previous configuration from a dictionary and web files and returns the metadata, cohort, entities, and relationships.
- get_er: Generates an entity-relationship diagram (ER diagram) for the entities and relationships.

Fields:
- _created_dt: The creation date and time of the CommonDataModel object.
- _uuid: The UUID of the CommonDataModel object.
- _out_dir: The output directory where the project is saved.
- _metadata: The metadata definition of the project.
- _cohort: The cohort definition of the project.
- _entities: The list of entities in the project.
- _relationships: The list of relationships between entities in the project.
- folder_code: A folder code generated from the creation date and time of the CommonDataModel object.
"""
class TestCommonDataModel:
    #  Tests that an instance of CommonDataModel can be created with all required parameters
    def test_create_instance_with_all_parameters(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')

        cohort = Cohort(
            name='Test Cohort',
            description='Test Description',
            inclusion_criteria='Test Inclusion Criteria',
            beggining_study_period=datetime.date(2021, 1, 1),
            end_study_period=datetime.date(2021, 12, 31)
        )
        entities = [Entity('TestEntity')]
        left_entity_ = Entity("entity1")
        left_column_ = Variable("person_id", "person pseudonymized identificator")
        left_entity_.add_variable(left_column_)
        right_entity_ = Entity("entity2")
        right_column_ = Variable("patient_id", "patient pseudonymized identificator")
        right_entity_.add_variable(right_column_)
        first_relationship = Relationship(left_entity_, right_entity_, left_column_, right_column_, "INNER JOIN")
        relationships = [first_relationship]
        cdm = CommonDataModel(metadata, cohort, entities, relationships)
        assert cdm.metadata == metadata
        assert cdm.cohort == cohort
        assert cdm.entities == entities
        assert cdm.relationships == relationships

    #  Tests that an instance of CommonDataModel can be created without providing relationships
    def test_create_instance_without_relationships(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        cohort = Cohort(
            name='Test Cohort',
            description='Test Description',
            inclusion_criteria='Test Inclusion Criteria',
            beggining_study_period=datetime.date(2021, 1, 1),
            end_study_period=datetime.date(2021, 12, 31)
        )
        entities = [Entity('TestEntity')]
        cdm = CommonDataModel(metadata, cohort, entities)
        assert cdm.metadata == metadata
        assert cdm.cohort == cohort
        assert cdm.entities == entities
        assert cdm.relationships == []

    #  Tests that an instance of CommonDataModel can be created without providing entities
    def test_create_instance_without_entities(self):
        metadata = Metadata(project='Test Project', use_case='Test Use Case')
        cohort = Cohort(
            name='Test Cohort',
            description='Test Description',
            inclusion_criteria='Test Inclusion Criteria',
            beggining_study_period=datetime.date(2021, 1, 1),
            end_study_period=datetime.date(2021, 12, 31)
        )
        entities = [Entity('TestEntity')]
        left_entity_ = Entity("entity1")
        left_column_ = Variable("person_id", "person pseudonymized identificator")
        left_entity_.add_variable(left_column_)
        right_entity_ = Entity("entity2")
        right_column_ = Variable("patient_id", "patient pseudonymized identificator")
        right_entity_.add_variable(right_column_)
        first_relationship = Relationship(left_entity_, right_entity_, left_column_, right_column_, "INNER JOIN")
        relationships = [first_relationship]
        cdm = CommonDataModel(metadata, cohort,[] ,relationships=relationships)
        assert cdm.metadata == metadata
        assert cdm.cohort == cohort
        assert cdm.entities == []
        assert cdm.relationships == relationships